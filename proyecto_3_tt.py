# -*- coding: utf-8 -*-
"""Proyecto 3 TT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gdUn0BEbuy3EFotKqmbXvC-25uz3lElc

## Etapa 1. Descripción de los datos <a id='data_review'></a>

Abre los datos y examínalos.
"""

import pandas as pd

"""Etapa 1.2. Lee el archivo `music_project_en.csv` de la carpeta `/datasets/` y guárdalo en la variable `df`:"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/Archivos TT/music_project_en.csv')

"""Muestra las primeras 10 filas"""

print(df.head(10))

"""Etapa 1.4. Obtén la información general sobre la tabla con el método info()."""

df.info()

"""Estas son nuestras observaciones sobre la tabla. Contiene siete columnas que almacenan los mismos tipos de datos: `object`.

Según la documentación:
- `' userID'`: identificador del usuario;
- `'Track'`: título de la canción;
- `'artist'`: nombre del artista;
- `'genre'`: género de la canción;
- `'City'`: ciudad del usuario;
- `'time'`: la hora exacta en la que se reprodujo la canción;
- `'Day'`: día de la semana.

Podemos ver tres problemas con el estilo en los encabezados de la tabla:
1. Algunos encabezados están en mayúsculas, otros en minúsculas.
2. Hay espacios en algunos encabezados.
3. El user id le falta un guin bajo para separar las dos palabras.

### Escribe algunas observaciones por tu parte. Contesta a las siguientes preguntas: <a id='data_review_conclusions'></a>

`1.   ¿Qué tipo de datos hay en las filas? ¿Cómo podemos saber qué almacenan las columnas?`

`2.   ¿Hay suficientes datos para proporcionar respuestas a nuestra hipótesis o necesitamos más información?`

`3.   ¿Notaste algún problema en los datos, como valores ausentes, duplicados o tipos de datos incorrectos?`

1. Todos los datos son strings/objects, con el comando info()

2.  Aunque hagan falta algunos datos, tenemos la mayoria de ellos para poder hacer una deducción

3. Hay valores ausentes tanto de track como de artist, pero se pueden rellenar algunos datos viendo la informacion de las columnas en la misma fila, y seguramente habra alguno que otro dato duplicado

## Etapa 2. Preprocesamiento de los datos <a id='data_preprocessing'></a>

Tu objetivo aquí es preparar los datos para analizarlos.
El primer paso es resolver los problemas con los encabezados. Después podemos avanzar a los valores ausentes y duplicados. ¡Empecemos!

Vamos a corregir el formato en los encabezados de la tabla.

### Estilo del encabezado <a id='header_style'></a>
Etapa 2.1. Muestra los encabezados de la tabla (los nombres de las columnas):
"""

print(df.head(0))

"""Vamos cambiar los encabezados de la tabla siguiendo las reglas estilísticas convencionales:
*   Todos los caracteres deben ser minúsculas.
*   Elimina los espacios.
*   Si el nombre tiene varias palabras, utiliza snake_case.

Anteriormente, aprendiste una forma automática de cambiar el nombre de las columnas. Vamos a aplicarla ahora.

Etapa 2.2. Utiliza el bucle for para iterar sobre los nombres de las columnas y poner todos los caracteres en minúsculas. Cuando hayas terminado, vuelve a mostrar los encabezados de la tabla:
"""

for name in df.columns:
    df.rename(columns={name: name.lower()}, inplace=True)
    print(df.columns)

"""Etapa 2.3. Ahora, utilizando el mismo método, elimina los espacios al principio y al final de los nombres de las columnas y muestra los nombres de las columnas de nuevo:"""

for name in df.columns:
    renamed_name = name.lower().strip() # Convert to lowercase and remove leading/trailing spaces
    df.rename(columns={name: renamed_name}, inplace=True)
print(df.columns)

"""Etapa 2.4. Necesitamos aplicar la regla de snake_case en la columna `userid`. Debe ser `user_id`. Cambia el nombre de esta columna y muestra los nombres de todas las columnas cuando hayas terminado."""

for name in df.columns:
    if name == 'userid':
        df.rename(columns={name: 'user_id'}, inplace=True)
print(df.columns)

"""Etapa 2.5. Comprueba el resultado. Muestra los encabezados una vez más:"""

print(df.head(0))

"""### Valores ausentes <a id='missing_values'></a>
 Etapa 2.5. Primero, encuentra el número de valores ausentes en la tabla. Debes utilizar dos métodos para obtener el número de valores ausentes.
"""

df.info()
print(df.isna().sum())

"""Etapa 2.6. Sustituye los valores ausentes en las columnas `'track'`, `'artist'` y `'genre'` con el string `'unknown'`.

1. Crea una lista llamada columns_to_replace que contenga los nombres de las columnas 'track', 'artist' y 'genre'.

2. Usa un bucle for para iterar sobre cada columna en columns_to_replace.

3. Dentro del bucle, sustituye los valores ausentes en cada columna con el string `'unknown'`.
"""

cloumns_to_replace = ['track', 'artist', 'genre']
for column in cloumns_to_replace:
    df[column] = df[column].fillna('unknown')

"""Etapa 2.7. Ahora comprueba el resultado para asegurarte de que no falten valores ausentes por reemplazar en el conjunto de datos. Para ello, cuenta los valores ausentes una vez más."""

df.info()
print(df.isna().sum())

"""### Duplicados <a id='duplicates'></a>
Etapa 2.8. Encuentra el número de duplicados explícitos en la tabla. Una vez más, debes aplicar dos métodos para obtener la cantidad de duplicados explícitos.
"""

print(df.duplicated().sum())

"""Etapa 2.9. Ahora, elimina todos los duplicados. Para ello, llama al método que hace exactamente esto."""

df.drop_duplicates(inplace=True)

"""Etapa 2.10. Comprobemos ahora si conseguimos eliminar todos los duplicados. Cuenta los duplicados explícitos una vez más para asegurarte de haberlos eliminado todos:"""

print(df.duplicated().sum())

"""Etapa 2.11. Primero debemos mostrar una lista de nombres de géneros únicos, por orden alfabético. Para ello:
1. Extrae la columna `genre` del DataFrame.
2. Llama al método que devolverá todos los valores únicos en la columna extraída.

"""

print(df['genre'].unique())

"""Vamos a examinar la lista para identificar **duplicados implícitos** del género `hiphop`, es decir, nombres mal escritos o variantes que hacen referencia al mismo género musical.

Algunos de los duplicados que encontrarás son:

* `hip`  
* `hop`  
* `hip-hop`  

Para solucionarlo, vamos a crear una función llamada `replace_wrong_genres()` que tendrá dos parámetros:

* `wrong_genres`: una lista con todos los valores que deben ser reemplazados.  
* `correct_genre`: un string que se utilizará como valor de reemplazo.

El objetivo de esta función es **corregir los valores en la columna `'genre'` del DataFrame `df`**, reemplazando cada valor de la lista `wrong_genres` por `correct_genre`.

Etapa 2.12.
1. Define una función llamada `replace_wrong_genres()` que reciba dos parámetros: `wrong_genres` y `correct_genre`.

2. Dentro de la función, utiliza un bucle `for` para iterar sobre cada valor en la lista `wrong_genres`.

3. En cada iteración, accede a la columna `'genre'` del DataFrame `df` y utiliza el método `.replace()` para sustituir el valor incorrecto por `correct_genre`.

4. Llama a la función y pasa como argumentos:
   - Una lista con los duplicados implícitos: `['hip', 'hop', 'hip-hop']`
   - El string de reemplazo: `'hiphop'`
"""

def replace_wrong_genres(wrong_genres, correct_genre):
    for wrong_genre in wrong_genres:
        df['genre'] = df['genre'].replace(wrong_genre, correct_genre)
replace_wrong_genres(['hip', 'hop', 'hip-hop'], 'hiphop')

"""Etapa 2.14. Asegúrate de que los nombres duplicados se hayan eliminado. Muestra la lista de valores únicos de la columna `'genre'` una vez más:"""

print(df['genre'].unique())

"""### Observaciones <a id='data_preprocessing_conclusions'></a>

`Redacta un breve resumen de lo que descubriste al analizar los datos. Tu respuesta debe identificar los problemas detectados, explicar cómo los resolviste y describir cómo esas acciones mejoran la calidad del análisis.`

Que si no te aseguras de hacer una limpieza previa de los datos, el análisis estará mal hecho ya que hay datos que se repiten, o son el mismo pero se llaman diferente, influyendo en el análisis del caso, arrojando asi un analisis erroneo o poco certero

## Etapa 3. Prueba de la hipótesis <a id='hypothesis'></a>

### Tarea: Comparar el comportamiento de los usuarios en las dos ciudades <a id='activity'></a>

Etapa 3.1. Cuenta cuántas canciones se reprodujeron en cada ciudad utilizando la columna 'track' como referencia.
"""

Springfield = df[df['city'] == 'Springfield']
Shelbyville = df[df['city'] == 'Shelbyville']
print(Springfield['track'].count())
print(Shelbyville['track'].count())

"""`Redacta brevemente tus observaciones sobre los resultados. ¿Qué diferencias notaste entre Springfield y Shelbyville? ¿A qué podrían deberse esas diferencias?`

En la ciudad springfield se escucha mas musica que en la otra ciudad, pero puede ser que una ciudad es mas grande que otra

Etapa 3.3.

Agrupa los datos por día de la semana y cuenta cuántas canciones se reprodujeron los lunes, miércoles y viernes.

Utiliza el mismo método de conteo que antes, pero ahora cambia la columna de agrupación para enfocarte en el día.

Esto te permitirá identificar posibles patrones de escucha según el día de la semana.
"""

lunes = df[df['day'] == 'Monday']
miercoles = df[df['day'] == 'Wednesday']
viernes = df[df['day'] == 'Friday']
print(lunes['track'].count())
print(miercoles['track'].count())
print(viernes['track'].count())

"""`Describe brevemente qué observaste al comparar los lunes, miércoles y viernes. ¿Hubo algún día con menos actividad? ¿Cambian las conclusiones si analizas cada ciudad por separado?`

Que entre semana la gente escucha menos musica que a inicio o fin de semana, si cambian las conclusiones al sacar el conteo por ciudades separadas

Etapa 3.5.
1. Declara una función llamada `number_tracks()` con dos parámetros: `day` y `city`.

2. Filtra el DataFrame para conservar solo las filas donde la columna `'day'` sea igual al valor del parámetro `day`.

3. A partir del resultado anterior, filtra nuevamente para conservar solo las filas donde la columna `'city'` sea igual al valor del parámetro `city`.

4. Extrae la columna `'user_id'` del DataFrame filtrado y utiliza el método `.count()` para contar el número de entradas.

5. Guarda ese valor en una variable y **devuélvelo** como resultado de la función.
"""

def number_tracks(day, city):
    track_list = df[(df['day'] == day) & (df['city'] == city)]
    track_list_count = track_list['user_id'].count()
    return track_list_count

"""Etapa 3.6. Llama a `number_tracks()` seis veces, cambiando los valores de los parámetros para que puedas recuperar los datos de ambas ciudades para cada uno de los tres días."""

print("Canciones escuchadas los Lunes en Springfield:", number_tracks('Monday', 'Springfield'))
print("Canciones escuchadas los Miércoles en Springfield:", number_tracks('Wednesday', 'Springfield'))
print("Canciones escuchadas los Viernes en Springfield:", number_tracks('Friday', 'Springfield'))
print()
print("Canciones escuchadas los Lunes en Shelbyville:", number_tracks('Monday', 'Shelbyville'))
print("Canciones escuchadas los Miércoles en Shelbyville:", number_tracks('Wednesday', 'Shelbyville'))
print("Canciones escuchadas los Viernes en Shelbyville:", number_tracks('Friday', 'Shelbyville'))

"""## Conclusiones

##Escribe tus conclusiones finales sobre la hipótesis.
 * ¿Los datos apoyan la idea de que el comportamiento de los usuarios respecto a la música que escuchan varía según la ciudad y el día de la semana?
 * Indica si la hipótesis debe aceptarse o rechazarse, y justifica tu respuesta con base en los resultados obtenidos.

1. Si, la musica escuchada segun la ciudad y el día si varian en ambos casos, en Springfield la gente escucha menos muisica los dias miércoles, mientras que en la otra ciudad el dia con más reproducciones son los miércoles
2. La hipotesis si debe aceptarse porque: sí cambia la cantidad de musica escuchada dependiendo de la ciudad y de el día en la ciudad
"""